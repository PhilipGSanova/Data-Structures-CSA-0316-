#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef enum {RED, BLACK} Colour;

struct node {
    int data;
    struct node* parent;
    struct node* left;
    struct node* right;
    Colour colour;
};

struct node* insert(struct node* root, int num) {
    struct node* n = (struct node*)malloc(sizeof(struct node));
    n->data = num;
    n->left = NULL;
    n->right = NULL;
    n->parent = NULL;
    n->colour = RED;

    struct node* a = NULL;
    struct node* b = root;

    while (b != NULL) {
        a = b;
        if (n->data < b->data)
            b = b->left;
        else
            b = b->right;
    }

    n->parent = a;
    if (a == NULL)
        root = n;
    else if (n->data < a->data)
        a->left = n;
    else
        a->right = n;

    checkrbt(&root, n);
    return root;
}

void rRotate(struct node** root, struct node* y) {
    struct node* x = y->left;
    y->left = x->right;

    if (x->right != NULL)
        x->right->parent = y;
    x->parent = y->parent;
    if (y->parent == NULL)
        *root = x;
    else if (y == y->parent->left)
        y->parent->left = x;
    else
        y->parent->right = x;

    x->right = y;
    y->parent = x;
}

void lRotate(struct node** root, struct node* x) {
    struct node* y = x->right;
    x->right = y->left;

    if (y->left != NULL)
        y->left->parent = x;
    y->parent = x->parent;
    if (x->parent == NULL)
        *root = y;
    else if (x == x->parent->left)
        x->parent->left = y;
    else
        x->parent->right = y;

    y->left = x;
    x->parent = y;
}

void checkrbt(struct node** root, struct node* z) {
    while (z->parent != NULL && z->parent->colour == RED) {
        if (z->parent == z->parent->parent->left) {
            struct node* y = z->parent->parent->right;
            if (y != NULL && y->colour == RED) {
                z->parent->colour = BLACK;
                y->colour = BLACK;
                z->parent->parent->colour = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->right) {
                    z = z->parent;
                    lRotate(root, z);
                }
                z->parent->colour = BLACK;
                z->parent->parent->colour = RED;
                rRotate(root, z->parent->parent);
            }
        } else {
            struct node* y = z->parent->parent->left;
            if (y != NULL && y->colour == RED) {
                z->parent->colour = BLACK;
                y->colour = BLACK;
                z->parent->parent->colour = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->left) {
                    z = z->parent;
                    rRotate(root, z);
                }
                z->parent->colour = BLACK;
                z->parent->parent->colour = RED;
                lRotate(root, z->parent->parent);
            }
        }
    }
    (*root)->colour = BLACK;
}

void inorderTraverse(struct node* root) {
    if (root != NULL) {
        inorderTraverse(root->left);
        if (root->colour == BLACK) {
            printf("%d Black node\n", root->data);
        } else {
            printf("%d Red node\n", root->data);
        }
        inorderTraverse(root->right);
    }
}
int main(){
	printf("Name: Philip Gracian Sanova\nReg no: 192324023\n");
    struct node* root = NULL;
    int array[] = {10,18,7,15,16,30,25,40,60};
    for (int i = 0; i < 9; i++) {
        root = insert(root, array[i]);
    }
    printf("\n");
    inorderTraverse(root);
}
